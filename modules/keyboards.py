from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from modules.app_config import settings_manager, env_config
import json

from modules.utils import boolean_options_names


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–µ–Ω—é –±–æ—Ç–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_button_search"), callback_data="search_offers"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_button_view_offer"), callback_data="view_offer_by_id"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_button_change_filters"), callback_data="change_filters"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_button_update_cookie"), callback_data="update_lardi_cookie"))
    return builder.as_markup()


def get_back_to_main_menu_button() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é".
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="start_menu"))
    return builder.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥—ñ–π.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_action"))
    return builder.as_markup()


def get_filter_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_filter_directions"), callback_data="filter_directions_menu"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_filter_cargo_params"), callback_data="filter_cargo_params_menu"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_filter_load_types"), callback_data="filter_load_types_menu"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_filter_payment_forms"), callback_data="filter_payment_forms_menu"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_filter_boolean_options"), callback_data="filter_boolean_options_menu"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_show_current_filters"), callback_data="show_current_filters"))
    builder.row(InlineKeyboardButton(text=settings_manager.get("text_reset_filters"), callback_data="reset_filters_confirm"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="start_menu"))
    return builder.as_markup()


def get_numeric_input_keyboard(param_name: str) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥—É —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å, –≤–∫–ª—é—á–∞—é—á–∏ –∫–Ω–æ–ø–∫—É "–°–∫–∏–Ω—É—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è".
    param_name: –Ω–∞–∑–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—É, —è–∫–∏–π —Å–∫–∏–¥–∞—î—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "mass1", "volume2")
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_input"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è", callback_data=f"clear_{param_name}"))
    return builder.as_markup()


def get_cargo_params_filter_keyboard(current_filters: dict) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    –ü—Ä–∏–π–º–∞—î —Å–ª–æ–≤–Ω–∏–∫ current_filters –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.
    """
    builder = InlineKeyboardBuilder()

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –∞–±–æ "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    def get_filter_value(key1, key2=None):
        val1 = current_filters.get(key1)
        val2 = current_filters.get(key2) if key2 else None

        if val1 is not None and val2 is not None:
            return f"{val1}-{val2}"
        elif val1 is not None:
            return f"–≤—ñ–¥ {val1}"
        elif val2 is not None:
            return f"–¥–æ {val2}"
        return "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"

    builder.row(
        InlineKeyboardButton(text=f"–ú–∞—Å–∞: {get_filter_value('mass1', 'mass2')} —Ç", callback_data="set_mass1"),
        InlineKeyboardButton(text=f"–û–±'—î–º: {get_filter_value('volume1', 'volume2')} –º¬≥", callback_data="set_volume1")
    )
    builder.row(
        InlineKeyboardButton(text=f"–î–æ–≤–∂–∏–Ω–∞: {get_filter_value('length1', 'length2')} –º", callback_data="set_length1"),
        InlineKeyboardButton(text=f"–®–∏—Ä–∏–Ω–∞: {get_filter_value('width1', 'width2')} –º", callback_data="set_width1")
    )
    builder.row(
        InlineKeyboardButton(text=f"–í–∏—Å–æ—Ç–∞: {get_filter_value('height1', 'height2')} –º", callback_data="set_height1")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="back_to_filter_main_menu"))
    return builder.as_markup()


def get_load_types_filter_keyboard(current_load_types: list) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—é –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–∏–ø—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    """
    builder = InlineKeyboardBuilder()
    all_load_types = ["top", "side", "back", "tent_off", "beam_off", "rack_off", "gate_off", "tail_lift"]  # –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    ua_names_load_types = {
        "top": "–í–µ—Ä—Ö–Ω—î",
        "side": "–ë—ñ—á–Ω–µ",
        "back": "–ó–∞–¥–Ω—î",
        "tent_off": "–ó –ø–æ–≤–Ω–∏–º —Ä–æ–∑—Ç–µ–Ω—Ç—É–≤–∞–Ω–Ω—è–º",
        "beam_off": "–ó—ñ –∑–Ω—è—Ç—Ç—è–º –ø–æ–ø–µ—Ä–µ—á–æ–∫",
        "rack_off": "–ó—ñ –∑–Ω—è—Ç—Ç—è–º —Å—Ç—ñ–π–æ–∫",
        "gate_off": "–ë–µ–∑ –≤–æ—Ä—ñ—Ç",
        "tail_lift": "–ì—ñ–¥—Ä–æ–±–æ—Ä—Ç",
    }

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –ø–æ–∫–∞–∑—É—é—á–∏ –π–æ–≥–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    for load_type in all_load_types:
        emoji = "‚úÖ" if load_type in current_load_types else "‚ùå"
        builder.row(InlineKeyboardButton(text=f"{emoji} {ua_names_load_types[load_type.lower()]}", callback_data=f"toggle_load_type_{load_type}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="back_to_filter_main_menu"))
    return builder.as_markup()


def get_payment_forms_keyboard(selected_payment_forms: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç–∏.
    selected_payment_forms: —Å–ø–∏—Å–æ–∫ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ –æ–±—Ä–∞–Ω–∏—Ö —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç–∏.
    """
    builder = InlineKeyboardBuilder()

    all_payment_forms = {
        2: "–ì–æ—Ç—ñ–≤–∫–∞",
        4: "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞",
        6: "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞",
        8: "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø–ª–∞—Ç—ñ–∂",
        10: "–ö–∞—Ä—Ç–∞"
    }

    for form_id, form_name in all_payment_forms.items():
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ form_id –Ω–∞ —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, —è–∫—â–æ selected_payment_forms –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–∫–∏
        status = "‚úÖ" if form_id in selected_payment_forms else "‚ùå"
        builder.row(InlineKeyboardButton(text=f"{status} {form_name}", callback_data=f"toggle_payment_form_{form_id}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="back_to_filter_main_menu"))
    return builder.as_markup()


def get_boolean_options_keyboard(current_filters: dict) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –±—É–ª–µ–≤–∏—Ö (true/false) –æ–ø—Ü—ñ–π.
    current_filters: —Å–ª–æ–≤–Ω–∏–∫ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –±—É–ª–µ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (snake_case –∫–ª—é—á—ñ).
    """
    builder = InlineKeyboardBuilder()

    for param_name, display_name in boolean_options_names.items():
        # param_name –±—É–¥–µ snake_case (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "only_new")
        current_value = current_filters.get(param_name, False) # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ snake_case –∫–ª—é—á–µ–º

        status = "‚úÖ" if current_value is True else "‚ùå"
        button_text = f"{status} {display_name}"

        # callback_data –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ "toggle_boolean_only_new" (snake_case)
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"toggle_boolean_{param_name}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="back_to_filter_main_menu"))
    return builder.as_markup()


def get_reset_filters_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Å–∫–∏–Ω—É—Ç–∏", callback_data="reset_filters_confirmed"),
        InlineKeyboardButton(text="‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data="back_to_filter_main_menu")
    )
    return builder.as_markup()


def get_back_to_filter_main_menu_button() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤".
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤", callback_data="back_to_filter_main_menu"))
    return builder.as_markup()


def get_cargo_details_webapp_keyboard(cargo_id: int) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –∑–∞–ø—É—Å–∫—É Web App –∑ –¥–µ—Ç–∞–ª—è–º–∏ –≤–∞–Ω—Ç–∞–∂—É.
    """
    builder = InlineKeyboardBuilder()
    # URL –¥–ª—è WebApp –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏: https://your-domain.com/webapp/cargo_details.html?id={cargo_id}
    # –ó–º—ñ–Ω–µ–Ω–æ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—É `/webapp/cargo_details.html` —É `web_server.py`
    webapp_url_with_id = f"{env_config.WEBAPP_BASE_URL}.html?id={cargo_id}"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î Web App
    builder.row(InlineKeyboardButton(text="–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É", web_app=WebAppInfo(url=webapp_url_with_id)))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="start_menu"))
    return builder.as_markup()
