import json

from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State
from typing import Optional, List, Union, Any, Dict

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from logger import logger

from modules.app_config import settings_manager, env_config
from modules.keyboards import (
    get_main_menu_keyboard,
    get_back_to_main_menu_button,
    get_cancel_keyboard,
    get_filter_main_menu_keyboard,
    get_cargo_params_filter_keyboard,
    get_load_types_filter_keyboard,
    get_reset_filters_confirm_keyboard,
    get_back_to_filter_main_menu_button,
    get_cargo_details_webapp_keyboard,
    get_numeric_input_keyboard,
    get_payment_forms_keyboard,
    get_boolean_options_keyboard,
    get_notification_settings_keyboard,
    get_country_options_keyboard,
    get_direction_filter_menu_keyboard,
)
from modules.fsm_states import LardiForm, FilterForm
from modules.lardi_api_client import LardiClient, LardiOfferClient, LardiGeoClient

from modules.utils import date_format, add_line, user_filter_to_dict, boolean_options_names, ALL_COUNTRIES_FOR_SELECTION, COUNTRIES_PER_PAGE, escape_markdown_v2
from datetime import datetime, timezone, timedelta

# --- Django –º–æ–¥–µ–ª—ñ ---
from django.contrib.auth.models import User
from filters.models import LardiSearchFilter
from users.models import UserProfile
from asgiref.sync import sync_to_async

# ------

router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ Lardi
lardi_client = LardiClient()
lardi_offer_client = LardiOfferClient()
lardi_geo_client = LardiGeoClient()

INITIAL_NOTIFICATION_OFFSET_MINUTES = 5  # –í–∞–Ω—Ç–∞–∂—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω


# –Ü–º'—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Web App
# BOT_USERNAME = 'LardiSearch_bot'


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def _get_or_create_lardi_filter(telegram_id: int) -> LardiSearchFilter:
    """
    –û—Ç—Ä–∏–º—É—î –æ–±'—î–∫—Ç LardiSearchFilter –¥–ª—è –¥–∞–Ω–æ–≥–æ Telegram ID.
    –Ø–∫—â–æ –æ–±'—î–∫—Ç –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –∑ default_filters.
    """
    # –ó–º—ñ–Ω–µ–Ω–æ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –º–µ—Ç–æ–¥–∏ ORM await-—É—î–º–æ –Ω–∞–ø—Ä—è–º—É
    lardi_filter_obj = await LardiSearchFilter.objects.filter(user__telegram_id=telegram_id).afirst()
    if not lardi_filter_obj:
        user_profile, created = await UserProfile.objects.aget_or_create(telegram_id=telegram_id)
        lardi_filter_obj = await LardiSearchFilter.objects.acreate(user=user_profile, **lardi_client.default_filters())
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π LardiSearchFilter –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
    return lardi_filter_obj


@sync_to_async
def update_user_notification_status(user_profile: UserProfile, status: bool):
    user_profile.notification_status = status
    user_profile.notification_time = datetime.now(timezone.utc) if status else None
    user_profile.cargo_skip = []
    user_profile.save(update_fields=['notification_status', 'notification_time', 'cargo_skip'])


@sync_to_async
def get_user_profile(telegram_id: int) -> Optional[UserProfile]:
    try:
        return UserProfile.objects.get(telegram_id=telegram_id)
    except UserProfile.DoesNotExist:
        return None


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –†–µ—î—Å—Ç—Ä—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –¥–ª—è –Ω—å–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î.
    """
    await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω FSM

    telegram_id = message.from_user.id
    username = message.from_user.username or f"telegram_user_{telegram_id}"

    try:
        # 1. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ Django User
        django_user, user_created = await User.objects.aget_or_create(
            username=username,
            defaults={
                'first_name': message.from_user.first_name or '',
                'last_name': message.from_user.last_name or '',
            }
        )

        # –Ø–∫—â–æ user_created –¥–æ—Ä—ñ–≤–Ω—é—î False, –∞–ª–µ username –∑–º—ñ–Ω–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ
        if not user_created and await sync_to_async(lambda: django_user.username)() != username:
            django_user.username = username
            await sync_to_async(django_user.asave)()

        # 2. –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ UserProfile, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ django_user
        user_profile, profile_created = await UserProfile.objects.aget_or_create(
            telegram_id=telegram_id,
            defaults={'user': django_user}
        )
        if not profile_created and await sync_to_async(lambda: user_profile.user)() != django_user:
            user_profile.user = django_user
            await sync_to_async(user_profile.asave)()

        notifications_enabled = user_profile.notification_status

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user_created or profile_created:
            await message.answer(settings_manager.get("user_create"), reply_markup=get_main_menu_keyboard(notifications_enabled))
        else:
            await message.answer(settings_manager.get("user_comeback"), reply_markup=get_main_menu_keyboard(notifications_enabled))

        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î LardiSearchFilter –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await LardiSearchFilter.objects.aget_or_create(user=user_profile)

    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        print(f"Error during user registration: {e}")
        return


@router.callback_query(F.data == "start_menu")
async def cb_start_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    await state.clear()
    user_profile = await get_user_profile(callback.from_user.id)
    notifications_enabled = user_profile.notification_status if user_profile else False
    await callback.message.edit_text(
        settings_manager.get("text_welcome_message"),
        reply_markup=get_main_menu_keyboard(notifications_enabled)
    )
    await callback.answer()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å ---
@router.callback_query(F.data == "notification_settings")
async def cb_notification_settings(callback: CallbackQuery):
    user_profile = await get_user_profile(callback.from_user.id)
    if not user_profile:
        await callback.message.answer(settings_manager.get("text_error_user_not_found"))
        await callback.answer()
        return

    status_text = (
        settings_manager.get("text_notifications_status_enabled")
        if user_profile.notification_status
        else settings_manager.get("text_notifications_status_disabled")
    )
    await callback.message.edit_text(
        status_text,
        reply_markup=get_notification_settings_keyboard(user_profile.notification_status)
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def cb_toggle_notifications(callback: CallbackQuery):
    user_profile = await get_user_profile(callback.from_user.id)
    if not user_profile:
        await callback.message.answer(settings_manager.get("text_error_user_not_found"))
        await callback.answer()
        return

    new_status = not user_profile.notification_status
    await update_user_notification_status(user_profile, new_status)

    confirmation_text = (
        settings_manager.get("text_notifications_toggle_success_enabled")
        if new_status
        else settings_manager.get("text_notifications_toggle_success_disabled")
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å–æ–º —Å–ø–æ–≤—ñ—â–µ–Ω—å
    main_menu_keyboard = get_main_menu_keyboard(new_status)
    try:
        await callback.message.edit_text(
            settings_manager.get("text_welcome_message"),  # –ú–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" –∞–±–æ —â–æ—Å—å –±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ
            reply_markup=main_menu_keyboard
        )
    except TelegramBadRequest:
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(reply_markup=main_menu_keyboard)

    await callback.answer(confirmation_text)


@router.callback_query(F.data == "search_offers")
async def cb_search_offers(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—à—É–∫ –≤–∞–Ω—Ç–∞–∂—ñ–≤".
    –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –≤–∞–Ω—Ç–∞–∂—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    –∞–±–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await callback.answer(text="–®—É–∫–∞—é –≤–∞–Ω—Ç–∞–∂—ñ...", show_alert=False)

    try:
        telegram_id = callback.from_user.id

        user_profile = await UserProfile.objects.aget(telegram_id=telegram_id)

        lardi_filter_obj = await LardiSearchFilter.objects.aget(user=user_profile)

        user_filters = user_filter_to_dict(lardi_filter_obj) if user_filter_to_dict(lardi_filter_obj) else lardi_client.filters

        data = await lardi_client.get_proposals(filters=user_filters)
        results = data.get("result", {}).get("proposals", {})

        if not results:
            await callback.message.answer("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.", reply_markup=get_back_to_main_menu_button())
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–∞–∫—Å–∏–º—É–º 5 –≤–∞–Ω—Ç–∞–∂—ñ–≤ (—è–∫ —É –≤–∞—à–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ)
        for i, item in enumerate(results[:5], 1):
            _id = item.get('id', '')
            status = item.get('status', '')

            from_data = item.get("waypointListSource", [{}])[0]
            from_city = from_data.get("town", "–ù–µ–≤—ñ–¥–æ–º–æ")
            from_region = from_data.get("region", "")
            from_country = from_data.get("countrySign", "")
            from_address = from_data.get('address', "")

            to_data = item.get("waypointListTarget", [{}])[0]
            to_city = to_data.get("town", "–ù–µ–≤—ñ–¥–æ–º–æ")
            to_region = to_data.get("region", "")
            to_country = to_data.get("countrySign", "")
            to_address = to_data.get("address", "")

            cargo = item.get("gruzName", "‚Äî")
            mass = item.get("gruzMass", "‚Äî")
            volume = item.get("gruzVolume", "‚Äî")
            load_type = item.get("loadTypes", "‚Äî")
            payment = item.get("payment", "‚Äî")
            payment_form = ", ".join(pf.get("name", "") for pf in item.get("paymentForms", []))
            distance_km = round(item.get("distance", 0) / 1000) if item.get("distance") else '‚Äî'
            repeated_status = "üîÅ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π" if item.get("repeated") else ""

            # –û—Å–Ω–æ–≤–Ω–∞ —à–∞–ø–∫–∞
            block = f"üì¶ #{i} | ID: {_id} | {status}\n"
            block += f"üïí {date_format(item.get('dateFrom', ''))} ‚Üí {date_format(item.get('dateTo', ''))}\n"
            block += f"üìÖ –°—Ç–≤.: {date_format(item.get('dateCreate', ''))} | –ó–º—ñ–Ω.: {date_format(item.get('dateEdit', ''))}\n"
            # –ú—ñ—Å—Ü–µ –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            block += add_line("üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"{from_city}, {from_region} ({from_country})", important=True)
            block += add_line("‚óΩ –ê–¥—Ä–µ—Å–∞: ", f"{from_address}")
            # –ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            block += add_line("üìç –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"{to_city}, {to_region} ({to_country})", important=True)
            block += add_line("‚óæ –ê–¥—Ä–µ—Å–∞: ", f"{to_address}")
            block += add_line("üöö –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", load_type, important=True)
            # –í–∞–Ω—Ç–∞–∂
            block += add_line("üì¶ –í–∞–Ω—Ç–∞–∂: ", cargo)
            block += add_line("‚öñÔ∏è –í–∞–≥–∞: ", mass)
            block += add_line("üìê –û–± º—î–º: ", volume)
            # –û–ø–ª–∞—Ç–∞
            block += add_line("üí∞ –û–ø–ª–∞—Ç–∞: ", f"{payment} ({payment_form})", important=True)
            # –í—ñ–¥—Å—Ç–∞–Ω—å —ñ –ø–æ–≤—Ç–æ—Ä
            if distance_km != '‚Äî':
                block += f"üõ£Ô∏è –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km} –∫–º\n"
            if repeated_status:
                block += f"{repeated_status}\n"

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —ñ–∑ –≤–∞–Ω—Ç–∞–∂—ñ–≤ –æ–∫—Ä–µ–º–æ —ñ–∑ webapp button
            await callback.message.answer(block, reply_markup=get_cargo_details_webapp_keyboard(_id), parse_mode="Markdown")

        await callback.message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–∫–∞–∑ –≤–∞–Ω—Ç–∞–∂—ñ–≤.", reply_markup=get_back_to_main_menu_button())

    except Exception as e:
        await callback.message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞–Ω—Ç–∞–∂—ñ–≤: {e}", reply_markup=get_back_to_main_menu_button())
    finally:
        await callback.answer()


@router.callback_query(F.data == "view_offer_by_id")
async def cb_view_offer_by_id(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞–Ω—Ç–∞–∂ –∑–∞ ID".
    –ó–∞–ø–∏—Ç—É—î ID –≤–∞–Ω—Ç–∞–∂—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await state.set_state(LardiForm.waiting_for_offer_id)
    await callback.message.edit_text(
        settings_manager.get("text_enter_offer_id"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(LardiForm.waiting_for_offer_id)
async def process_offer_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤–∞–Ω—Ç–∞–∂—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    try:
        offer_id = int(message.text)
        await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–Ω—Ç–∞–∂...")

        data = await lardi_offer_client.get_offer(offer_id)

        if data:
            cargo_data = data.get('cargo', {})
            if cargo_data:
                # Extract and format data
                cargo_id_escaped = escape_markdown_v2(str(offer_id))
                date_from = date_format(cargo_data.get('dateFrom', ''))
                date_to = date_format(cargo_data.get('dateTo', ''))
                date_create = date_format(cargo_data.get('dateCreate', ''))
                date_edit = date_format(cargo_data.get('dateEdit', ''))

                source_waypoint = cargo_data.get('waypointListSource', [{}])[0]
                from_town = escape_markdown_v2(source_waypoint.get('townName', '–ù/–î'))
                from_region_full_name = source_waypoint.get('townFullName', '')
                from_region = escape_markdown_v2(from_region_full_name.split(',')[1].strip() if len(from_region_full_name.split(',')) > 1 else '–ù/–î')
                from_country_sign = escape_markdown_v2(source_waypoint.get('countrySign', '–ù/–î'))
                from_address = escape_markdown_v2(source_waypoint.get('address', ''))

                target_waypoint = cargo_data.get('waypointListTarget', [{}])[0]
                to_town = escape_markdown_v2(target_waypoint.get('townName', '–ù/–î'))
                to_region_full_name = target_waypoint.get('townFullName', '')
                to_region = escape_markdown_v2(to_region_full_name.split(',')[1].strip() if len(to_region_full_name.split(',')) > 1 else '–ù/–î')
                to_country_sign = escape_markdown_v2(target_waypoint.get('countrySign', '–ù/–î'))
                to_address = escape_markdown_v2(target_waypoint.get('address', ''))

                load_types = ", ".join([escape_markdown_v2(lt) for lt in cargo_data.get('loadTypes', [])]) or "–ù/–î"
                gruz_name = escape_markdown_v2(cargo_data.get('gruzName', '–ù/–î'))
                gruz_mass = escape_markdown_v2(str(cargo_data.get('gruzMass1', '–ù/–î')))
                gruz_volume = escape_markdown_v2(str(cargo_data.get('gruzVolume1', '–ù/–î')))
                payment_value = escape_markdown_v2(str(cargo_data.get('paymentValue', '–ù/–î')))
                payment_forms = escape_markdown_v2(", ".join([pf.get('name', '') for pf in cargo_data.get('paymentForms', []) if pf.get('name')])) or "–ù/–î"

                contact_info = cargo_data.get('proposalUser', {}).get('contact', {})
                contact_face = escape_markdown_v2(contact_info.get('face', '–ù/–î'))
                contact_name = escape_markdown_v2(contact_info.get('name', '–ù/–î'))
                phone_item1 = escape_markdown_v2(contact_info.get('phoneItem1', {}).get('phone', ''))
                phone_item2 = escape_markdown_v2(contact_info.get('phoneItem2', {}).get('phone', ''))

                response_text = (
                        f"üìÑ –î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É (ID: {cargo_id_escaped})\n"
                        + "=" * 40 + "\n"
                        + add_line("üïí ", f"{date_from} ‚Üí {date_to}")
                        + add_line("üìÖ –°—Ç–≤.: ", date_create)
                        + add_line("üìÖ –ó–º—ñ–Ω.: ", date_edit)
                        + add_line("üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"*{from_town}*, *{from_region}*, *{from_country_sign}*", important=True)
                        + add_line("‚óΩ ", from_address)
                        + add_line("üìç –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"*{to_town}*, *{to_region}*, *{to_country_sign}*", important=True)
                        + add_line("‚óæ ", to_address)
                        + add_line("üöö –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", load_types)
                        + add_line("üì¶ –í–∞–Ω—Ç–∞–∂: ", gruz_name)
                        + add_line("‚öñÔ∏è –í–∞–≥–∞: ", gruz_mass)
                        + add_line("üìê –û–± º—î–º: ", gruz_volume)
                        + add_line("üí∞ –û–ø–ª–∞—Ç–∞: ", f"*{payment_value} ({payment_forms})*", important=True)
                        + add_line("üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: ", contact_face)
                        + add_line("–ü–æ–≤–Ω–µ —ñ–º'—è: ", contact_name)
                        + add_line("üìû –¢–µ–ª–µ—Ñ–æ–Ω 1: ", phone_item1)
                        + add_line("üìû –¢–µ–ª–µ—Ñ–æ–Ω 2: ", phone_item2)
                )
                await message.answer(response_text, reply_markup=get_back_to_main_menu_button())
            else:
                await message.answer(settings_manager.get("text_offer_not_found"), reply_markup=get_back_to_main_menu_button())
        else:
            await message.answer(settings_manager.get("text_offer_not_found"), reply_markup=get_back_to_main_menu_button())

    except ValueError:
        await message.answer(
            settings_manager.get("text_invalid_offer_id"),
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ ID –≤–∞–Ω—Ç–∞–∂—É: {e}", exc_info=True)
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", reply_markup=get_back_to_main_menu_button())
    finally:
        await state.clear()


@router.callback_query(F.data == "update_lardi_cookie")
async def cb_update_lardi_cookie(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–Ω–æ–≤–∏—Ç–∏ Cookie Lardi".
    –ó–∞–ø–∏—Ç—É—î –Ω–æ–≤–∏–π cookie —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await state.set_state(LardiForm.waiting_for_new_cookie)
    await callback.message.edit_text(
        settings_manager.get("text_enter_new_cookie"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_action")
async def cb_cancel_action(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ FSM.
    """
    await state.clear()
    user_profile = await get_user_profile(callback.from_user.id)
    notifications_enabled = user_profile.notification_status if user_profile else False
    await callback.message.edit_text(
        settings_manager.get("text_welcome_message"),
        reply_markup=get_main_menu_keyboard(notifications_enabled)
    )
    await callback.answer()


@router.callback_query(F.data == "change_filters")
async def cb_change_filters(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    await state.set_state(FilterForm.main_menu)
    await callback.message.edit_text(
        settings_manager.get("text_filter_main_menu"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_filter_main_menu")
async def cb_back_to_filter_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –ø—ñ–¥–º–µ–Ω—é.
    """
    await state.set_state(FilterForm.main_menu)
    await callback.message.edit_text(
        settings_manager.get("text_filter_main_menu"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_directions_menu")
async def cb_filter_directions_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–ø—Ä—è–º–∫—ñ–≤.
    """
    await state.set_state(FilterForm.direction_menu)
    await callback.message.edit_text(
        settings_manager.get("text_directions_filter_menu"),
        reply_markup=get_back_to_filter_main_menu_button()
    )
    await callback.answer()


async def _handle_set_numeric_param(callback: CallbackQuery, state: FSMContext,
                                    param_name: str, prompt_text: str, current_value: Optional[float]):
    """
    –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
    """
    await state.set_state(getattr(FilterForm, f"waiting_for_{param_name}"))
    current_val_str = f"{current_value}" if current_value is not None else '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    await callback.message.edit_text(
        f"{prompt_text} –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_val_str}",
        reply_markup=get_numeric_input_keyboard(param_name)
    )
    await callback.answer()


async def _process_numeric_param_input(message: Message, state: FSMContext,
                                       param_name: str, next_state: State,
                                       prompt_text_next: Optional[str] = None,
                                       validation_key: Optional[str] = None,
                                       min_value: Optional[float] = None):
    """
    –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–∏—Ö —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    param_name: –Ω–∞–∑–≤–∞ –ø–æ–ª—è –≤ LardiSearchFilter (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "mass1", "mass2")
    next_state: –Ω–∞—Å—Ç—É–ø–Ω–∏–π FSM —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è
    prompt_text_next: —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫
    validation_key: –∫–ª—é—á –¥–ª—è –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—É FSM, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "mass1" –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ mass2)
    min_value: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ param_name - —Ü–µ mass2, –∞ validation_key - mass1, —Ç–æ min_value –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º mass1)
    """
    telegram_id = message.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    try:
        value = float(message.text.replace(',', '.'))
        if value < 0:
            raise ValueError(settings_manager.get("text_invalid_number_input"))

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è "–¥–æ" –∑–Ω–∞—á–µ–Ω–Ω—è (mass2, volume2, etc.)
        if validation_key:
            user_data = await state.get_data()
            prev_value = user_data.get(validation_key)
            # –û—Ç—Ä–∏–º–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ lardi_filter_obj, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –≤ FSM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ mass2 –±–µ–∑ –∑–º—ñ–Ω–∏ mass1)
            if prev_value is not None and value < prev_value:
                await message.answer(
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ ({validation_key.replace('1', '')} –≤—ñ–¥: {prev_value}). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_numeric_input_keyboard(param_name)
                )
                return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–æ–¥–µ–ª—ñ LardiSearchFilter
        setattr(lardi_filter_obj, param_name, value)
        await lardi_filter_obj.asave()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        await state.update_data({param_name: value})

        if next_state == FilterForm.cargo_params_menu:
            await state.clear()  # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ FSM context
            lardi_filter_obj_reloaded = await _get_or_create_lardi_filter(telegram_id)
            current_filters_dict = user_filter_to_dict(lardi_filter_obj_reloaded)
            await message.answer(
                settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", prompt_text_next),  # –¢—É—Ç prompt_text_next –±—É–¥–µ —è–∫ "–ú–∞—Å–∞", "–û–±'—î–º" —ñ —Ç.–¥.
                reply_markup=get_cargo_params_filter_keyboard(current_filters_dict)
            )
            await state.set_state(FilterForm.cargo_params_menu)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        else:
            await state.set_state(next_state)
            await message.answer(prompt_text_next, reply_markup=get_numeric_input_keyboard(param_name=param_name.replace('1', '2')))

    except ValueError as e:
        await message.answer(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. {e}", reply_markup=get_numeric_input_keyboard(param_name=param_name))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–≤–æ–¥—É –¥–ª—è {param_name}: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_numeric_input_keyboard(param_name=param_name))


@router.callback_query(F.data == "filter_cargo_params_menu")
async def cb_filter_cargo_params_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É.
    """
    telegram_id = callback.from_user.id
    lardi_client_obj = await _get_or_create_lardi_filter(telegram_id=telegram_id)

    # –ó–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –æ–±'—î–∫—Ç–∞–º–∏ –º–æ–¥–µ–ª—ñ
    current_filters_dict = user_filter_to_dict(lardi_filter_obj=lardi_client_obj)

    await state.set_state(FilterForm.cargo_params_menu)
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è –∑–º—ñ–Ω–∏:",
        reply_markup=get_cargo_params_filter_keyboard(current_filters_dict)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("clear_"))  # –û–±—Ä–æ–±–ª—è—î –±—É–¥—å-—è–∫–∏–π —Å—Ç–∞–Ω
async def cb_clear_numeric_param(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑ callback_data (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "clear_mass1" -> "mass1")
    param_to_clear = callback.data.replace("clear_", "")

    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ None
    setattr(lardi_filter_obj, param_to_clear, None)
    await lardi_filter_obj.asave()

    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑—ñ —Å—Ç–∞–Ω—É FSM, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º –±—É–≤
    user_data = await state.get_data()
    if param_to_clear in user_data:
        del user_data[param_to_clear]
        await state.set_data(user_data)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –±—É–≤ "–ø–µ—Ä—à–∏–π" –ø–∞—Ä–∞–º–µ—Ç—Ä (mass1, volume1, etc.)
    # –Ø–∫—â–æ —Ç–∞–∫, —Ç–æ –º–∏ —Ç–∞–∫–æ–∂ —Å–∫–∏–¥–∞—î–º–æ "–¥—Ä—É–≥–∏–π" –ø–∞—Ä–∞–º–µ—Ç—Ä (mass2, volume2, etc.)
    if param_to_clear.endswith('1'):
        param_to_clear_2 = param_to_clear.replace('1', '2')
        if hasattr(lardi_filter_obj, param_to_clear_2):
            setattr(lardi_filter_obj, param_to_clear_2, None)
            await lardi_filter_obj.asave()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–æ–≤—É –ø—ñ—Å–ª—è –æ–±–Ω—É–ª–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            if param_to_clear_2 in user_data:
                del user_data[param_to_clear_2]
                await state.set_data(user_data)
        message_text_part = f"{param_to_clear.replace('1', '').capitalize()} (—Ç–∞ {param_to_clear_2.replace('2', '')}) —Å–∫–∏–Ω—É—Ç–æ."
    else:
        message_text_part = f"{param_to_clear.capitalize()} —Å–∫–∏–Ω—É—Ç–æ."

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await state.clear()  # –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å —Å—Ç–∞–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ
    lardi_filter_obj_reloaded = await _get_or_create_lardi_filter(telegram_id)  # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    current_filters_dict = user_filter_to_dict(lardi_filter_obj_reloaded)

    await callback.message.edit_text(
        f"‚úÖ {message_text_part}\n–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è –∑–º—ñ–Ω–∏:",
        reply_markup=get_cargo_params_filter_keyboard(current_filters_dict)
    )
    await state.set_state(FilterForm.cargo_params_menu)
    await callback.answer()


@router.callback_query(F.data == "cancel_input")
async def cb_cancel_input(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É.
    """
    await state.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    current_filters_dict = user_filter_to_dict(lardi_filter_obj)

    await callback.message.edit_text(
        "–í–≤–µ–¥–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è –∑–º—ñ–Ω–∏:",
        reply_markup=get_cargo_params_filter_keyboard(current_filters_dict)
    )
    await state.set_state(FilterForm.cargo_params_menu)
    await callback.answer()


@router.callback_query(F.data == "set_mass1")
async def cb_set_mass1(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "mass1", "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –º–∞—Å—É (—É —Ç–æ–Ω–Ω–∞—Ö), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5", lardi_filter_obj.mass1
    )


@router.message(FilterForm.waiting_for_mass1)
async def process_mass1_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "mass1", FilterForm.waiting_for_mass2, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –º–∞—Å—É (—É —Ç–æ–Ω–Ω–∞—Ö), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20"
    )


@router.callback_query(F.data == "set_mass2")
async def cb_set_mass2(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "mass2", "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –º–∞—Å—É (—É —Ç–æ–Ω–Ω–∞—Ö), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20", lardi_filter_obj.mass2
    )


@router.message(FilterForm.waiting_for_mass2)
async def process_mass2_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "mass2", FilterForm.cargo_params_menu, "–ú–∞—Å–∞", validation_key="mass1"
    )


# –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –Ü–ù–®–ò–• –ü–ê–†–ê–ú–ï–¢–†–Ü–í –í–ê–ù–¢–ê–ñ–£ (–æ–±'—î–º, –¥–æ–≤–∂–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞)
@router.callback_query(F.data == "set_volume1")
async def cb_set_volume1(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "volume1", "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—É –º¬≥), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.0", lardi_filter_obj.volume1
    )


@router.message(FilterForm.waiting_for_volume1)
async def process_volume1_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "volume1", FilterForm.waiting_for_volume2, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—É –º¬≥), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10.0"
    )


@router.callback_query(F.data == "set_volume2")
async def cb_set_volume2(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "volume2", "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—É –º¬≥), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10.0", lardi_filter_obj.volume2
    )


@router.message(FilterForm.waiting_for_volume2)
async def process_volume2_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "volume2", FilterForm.cargo_params_menu, "–û–±'—î–º", validation_key="volume1"
    )


@router.callback_query(F.data == "set_length1")
async def cb_set_length1(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "length1", "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (—É –º/ldm), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13.6", lardi_filter_obj.length1
    )


@router.message(FilterForm.waiting_for_length1)
async def process_length1_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "length1", FilterForm.waiting_for_length2, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (—É –º/ldm), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13.6"
    )


@router.callback_query(F.data == "set_length2")
async def cb_set_length2(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "length2", "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (—É –º/ldm), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13.6", lardi_filter_obj.length2
    )


@router.message(FilterForm.waiting_for_length2)
async def process_length2_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "length2", FilterForm.cargo_params_menu, "–î–æ–≤–∂–∏–Ω–∞", validation_key="length1"
    )


@router.callback_query(F.data == "set_width1")
async def cb_set_width1(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "width1", "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.2", lardi_filter_obj.width1
    )


@router.message(FilterForm.waiting_for_width1)
async def process_width1_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "width1", FilterForm.waiting_for_width2, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.5"
    )


@router.callback_query(F.data == "set_width2")
async def cb_set_width2(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "width2", "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.5", lardi_filter_obj.width2
    )


@router.message(FilterForm.waiting_for_width2)
async def process_width2_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "width2", FilterForm.cargo_params_menu, "–®–∏—Ä–∏–Ω–∞", validation_key="width1"
    )


@router.callback_query(F.data == "set_height1")
async def cb_set_height1(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "height1", "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.0", lardi_filter_obj.height1
    )


@router.message(FilterForm.waiting_for_height1)
async def process_height1_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "height1", FilterForm.waiting_for_height2, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.5"
    )


@router.callback_query(F.data == "set_height2")
async def cb_set_height2(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    await _handle_set_numeric_param(
        callback, state, "height2", "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.5", lardi_filter_obj.height2
    )


@router.message(FilterForm.waiting_for_height2)
async def process_height2_input(message: Message, state: FSMContext):
    await _process_numeric_param_input(
        message, state, "height2", FilterForm.cargo_params_menu, "–í–∏—Å–æ—Ç–∞", validation_key="height1"
    )


@router.callback_query(F.data == "filter_load_types_menu")
async def cb_filter_load_types_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é —Ç–∏–ø—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id

    lardi_filter_obj = await LardiSearchFilter.objects.filter(user__telegram_id=telegram_id).afirst()

    if not lardi_filter_obj:
        user_profile, created = await UserProfile.objects.aget_or_create(telegram_id=telegram_id)
        lardi_filter_obj = await LardiSearchFilter.objects.acreate(user=user_profile, **lardi_client.default_filters())

    current_load_types = lardi_filter_obj.load_types if lardi_filter_obj.load_types is not None else []

    await state.set_state(FilterForm.load_types_menu)
    await callback.message.edit_text(
        settings_manager.get("text_select_load_types"),
        reply_markup=get_load_types_filter_keyboard(current_load_types)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_load_type_"))
async def cb_toggle_load_type(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id

    load_type_to_toggle = callback.data.replace("toggle_load_type_", "")

    lardi_filter_obj = await LardiSearchFilter.objects.filter(user__telegram_id=telegram_id).afirst()

    if not lardi_filter_obj:
        # –¶–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—è, —è–∫—â–æ cb_filter_load_types_menu –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ –π–æ–≥–æ,
        # –∞–ª–µ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫.
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await callback.answer()
        return

    current_load_types = lardi_filter_obj.load_types if lardi_filter_obj.load_types is not None else []

    # 2. –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫: –¥–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–ø
    if load_type_to_toggle in current_load_types:
        current_load_types.remove(load_type_to_toggle)
        message_text = f"‚ùå –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{load_type_to_toggle}' –≤–∏–º–∫–Ω–µ–Ω–æ."
    else:
        current_load_types.append(load_type_to_toggle)
        message_text = f"‚úÖ –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{load_type_to_toggle}' —É–≤—ñ–º–∫–Ω–µ–Ω–æ."

    # 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    lardi_filter_obj.load_types = current_load_types
    await lardi_filter_obj.asave()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async save

    # 4. –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–º—ñ–Ω–∏
    await callback.message.edit_reply_markup(
        reply_markup=get_load_types_filter_keyboard(current_load_types)
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
    await callback.answer(message_text, show_alert=False)


@router.callback_query(F.data == "filter_payment_forms_menu")
async def cb_filter_payment_forms_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç–∏.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id=telegram_id)

    # `payment_forms` –≤ –º–æ–¥–µ–ª—ñ - —Ü–µ —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª.
    # –Ø–∫—â–æ –≤–æ–Ω–æ None –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    current_payment_forms = lardi_filter_obj.payment_form_ids if lardi_filter_obj.payment_form_ids is not None else []

    await state.set_state(FilterForm.payment_forms_menu)
    await callback.message.edit_text(
        settings_manager.get("text_select_payment_forms"),
        reply_markup=get_payment_forms_keyboard(current_payment_forms)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_payment_form_"))
async def cb_toggle_payment_form(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ñ–æ—Ä–º–∏ –æ–ø–ª–∞—Ç–∏.
    """
    telegram_id = callback.from_user.id
    form_id_to_toggle = int(callback.data.replace("toggle_payment_form_", ""))  # –û—Ç—Ä–∏–º—É—î–º–æ ID —Ñ–æ—Ä–º–∏ –æ–ø–ª–∞—Ç–∏ —è–∫ int

    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)
    current_payment_forms = lardi_filter_obj.payment_form_ids if lardi_filter_obj.payment_form_ids is not None else []

    # –î–æ–ø–æ–º—ñ–∂–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –Ω–∞–∑–≤ —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç–∏ (–¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
    payment_forms_names = {
        2: "–ì–æ—Ç—ñ–≤–∫–∞",
        4: "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞",
        6: "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞",
        8: "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø–ª–∞—Ç—ñ–∂",
        10: "–ö–∞—Ä—Ç–∞"
    }
    form_name = payment_forms_names.get(form_id_to_toggle, f"–ù–µ–≤—ñ–¥–æ–º–∞ —Ñ–æ—Ä–º–∞ ({form_id_to_toggle})")

    if form_id_to_toggle in current_payment_forms:
        current_payment_forms.remove(form_id_to_toggle)
        message_text = f"‚ùå –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç–∏ '{form_name}' –≤–∏–º–∫–Ω–µ–Ω–∞."
    else:
        current_payment_forms.append(form_id_to_toggle)
        message_text = f"‚úÖ –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç–∏ '{form_name}' —É–≤—ñ–º–∫–Ω–µ–Ω–∞."

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
    lardi_filter_obj.payment_form_ids = current_payment_forms
    await lardi_filter_obj.asave()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_payment_forms_keyboard(current_payment_forms)
    )
    await callback.answer(message_text, show_alert=False)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è countrySign –∑ JSON-–ø–æ–ª—è
def _extract_country_signs(direction_data: Union[Dict[str, Any], List[Any], str, None]) -> List[str]:
    """
    –í–∏–ª—É—á–∞—î –∫–æ–¥–∏ –∫—Ä–∞—ó–Ω –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –Ω–∞–ø—Ä—è–º–∫—É (direction_data).
    –†–æ–±–∏—Ç—å —Ü–µ —Å—Ç—ñ–π–∫–æ –¥–æ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Å–ª–æ–≤–Ω–∏–∫, —Å–ø–∏—Å–æ–∫, JSON-—Ä—è–¥–æ–∫).
    """
    selected_countries = []

    parsed_data = None
    if isinstance(direction_data, str):
        try:
            parsed_data = json.loads(direction_data)
        except json.JSONDecodeError:
            if len(direction_data) == 2 and direction_data.isalpha():
                return [direction_data.upper()]
            return []
    elif isinstance(direction_data, (dict, list)):
        parsed_data = direction_data
    elif direction_data is None:
        return []

    if isinstance(parsed_data, dict) and "directionRows" in parsed_data \
            and isinstance(parsed_data["directionRows"], list):
        for row in parsed_data["directionRows"]:
            if isinstance(row, dict) and "countrySign" in row:
                selected_countries.append(row["countrySign"])
    elif isinstance(parsed_data, list):
        for item in parsed_data:
            if isinstance(item, dict) and "directionRows" in item \
                    and isinstance(item["directionRows"], list):
                for row in item["directionRows"]:
                    if isinstance(row, dict) and "countrySign" in row:
                        selected_countries.append(row["countrySign"])
            elif isinstance(item, str) and len(item) == 2 and item.isalpha():
                selected_countries.append(item)

    return [c.upper() for c in list(set(selected_countries))]



@router.message(FilterForm.waiting_for_town_query)
async def process_town_search_query(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É.
    –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ LardiGeoClient —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
    """
    user_query = message.text.strip()
    telegram_id = message.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    if not user_query:
        await message.answer(settings_manager.get("text_enter_town_name_for_search_error"), reply_markup=get_cancel_keyboard())
        return

    state_data = await state.get_data()
    direction_type = state_data.get('direction_type')

    country_sign = "UA" # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    direction_filter_json = None

    if direction_type == 'from' and lardi_filter_obj.direction_from:
        direction_filter_json = lardi_filter_obj.direction_from
    elif direction_type == 'to' and lardi_filter_obj.direction_to:
        direction_filter_json = lardi_filter_obj.direction_to

    if direction_filter_json:
        try:
            # –ü–∞—Ä—Å–∏–º–æ JSON-—Ä—è–¥–æ–∫
            direction_data = json.loads(direction_filter_json)
            if direction_data and 'directionRows' in direction_data and direction_data['directionRows']:
                first_row = direction_data['directionRows'][0]
                if 'countrySign' in first_row:
                    country_sign = first_row['countrySign']
                    logger.info(f"Using country sign from filter: {country_sign} for direction {direction_type}")

        except json.JSONDecodeError:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –¥–ª—è –Ω–∞–ø—Ä—è–º–∫—É {direction_type}: {direction_filter_json}")

        except KeyError as e:
            logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á —É JSON —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–∞–ø—Ä—è–º–∫—É {direction_type}: {e}")

    await message.answer("–®—É–∫–∞—é –º—ñ—Å—Ç–∞ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º...")

    geo_data = await lardi_geo_client.get_geo_data(query=user_query, sign=country_sign)

    towns_results = [item for item in geo_data if item.get('type') == 'TOWN']

    print(towns_results)
    # if not towns_results:
    #     await message.answer(
    #         settings_manager.get("text_no_towns_found").format(query=user_query),
    #         reply_markup=get_town_search_keyboard(direction_type=direction_type)
    #     )
    #     return
    #
    # await state.update_data(
    #     towns_search_results=towns_results,
    #     current_town_search_query=user_query,
    #     current_town_search_page=0
    # )
    #
    # await message.answer(
    #     settings_manager.get("text_select_town_from_list"),
    #     reply_markup=get_towns_search_results_keyboard(
    #         direction_type=direction_type,
    #         towns_data=towns_results,
    #         current_page=0
    #     )
    # )
    # await state.set_state(FilterForm.select_town)



@router.callback_query(F.data == "direction_filter_menu")
async def cb_direction_filter_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—ñ–≤.
    """
    await callback.message.edit_text(
        settings_manager.get("text_directions_menu"),
        reply_markup=get_direction_filter_menu_keyboard()
    )
    await state.set_state(FilterForm.direction_menu)
    await callback.answer()


@router.callback_query(F.data == "set_direction_from_country")
async def cb_set_direction_from_country(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_from)

    await callback.message.edit_text(
        settings_manager.get("text_countries_menu"),
        reply_markup=get_country_options_keyboard(current_selected_countries, current_page=0, is_from_direction=True)
    )
    await state.set_state(FilterForm.waiting_for_country_from)
    await callback.answer()


@router.callback_query(F.data == "set_direction_to_country")
async def cb_set_direction_to_country(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_to)

    await callback.message.edit_text(
        settings_manager.get("text_countries_menu"),
        reply_markup=get_country_options_keyboard(current_selected_countries, current_page=0, is_from_direction=False)
    )
    await state.set_state(FilterForm.waiting_for_country_to)
    await callback.answer()


@router.callback_query(F.data.startswith("country_page:"))
async def cb_country_pagination(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω.
    Callback data: "country_page:{'from'|'to'}:{'prev'|'next'}:{current_page}"
    """
    try:
        data = callback.data.split(':')
        direction_type = data[1]  # 'from' –∞–±–æ 'to'
        action = data[2]  # 'prev' –∞–±–æ 'next'
        current_page = int(data[3]) # –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, –∑ —è–∫–æ—ó –π–¥–µ –∑–∞–ø–∏—Ç

        telegram_id = callback.from_user.id
        lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

        is_from_direction = (direction_type == 'from')

        if is_from_direction:
            current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_from)
        else:
            current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_to)

        all_country_codes = list(ALL_COUNTRIES_FOR_SELECTION.keys())
        total_countries = len(all_country_codes)
        total_pages = (total_countries + COUNTRIES_PER_PAGE - 1) // COUNTRIES_PER_PAGE

        new_page = current_page

        if action == 'next':
            if current_page < total_pages - 1:
                new_page = current_page + 1
        elif action == 'prev':
            if current_page > 0:
                new_page = current_page - 1

        if new_page != current_page:
            await callback.message.edit_reply_markup(
                reply_markup=get_country_options_keyboard(
                    current_selected_countries,
                    current_page=new_page,
                    is_from_direction=is_from_direction
                )
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cb_country_pagination: {e}", exc_info=True)
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫—Ä–∞—ó–Ω.", show_alert=True)


@router.callback_query(F.data.startswith("select_from_country:"))
@router.callback_query(F.data.startswith("select_to_country:"))
async def cb_select_country(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω–∏.
    Callback data: "select_from_country:{country_code}:{current_page}"
    Callback data: "select_to_country:{country_code}:{current_page}"
    """
    data = callback.data.split(':')
    callback_prefix = data[0]
    country_code = data[1]
    current_page = int(data[2])

    is_from_direction = (callback_prefix == "select_from_country")

    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    logger.info(f"cb_select_country: –ó–∞–ø—É—â–µ–Ω–æ –¥–ª—è user_id={telegram_id}, country_code={country_code}, direction_type={'from' if is_from_direction else 'to'}")
    logger.info(f"cb_select_country: LardiSearchFilter ID: {lardi_filter_obj.id}")
    logger.info(f"cb_select_country: direction_from (–∑ –ë–î –î–û –æ–±—Ä–æ–±–∫–∏): {lardi_filter_obj.direction_from}")
    logger.info(f"cb_select_country: direction_to (–∑ –ë–î –î–û –æ–±—Ä–æ–±–∫–∏): {lardi_filter_obj.direction_to}")

    if is_from_direction:
        current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_from)
    else:
        current_selected_countries = _extract_country_signs(lardi_filter_obj.direction_to)

    logger.info(f"cb_select_country: current_selected_countries (–ø—ñ—Å–ª—è _extract_country_signs): {current_selected_countries}")

    new_selected_countries_data = {"directionRows": []}

    if country_code.upper() in [c.upper() for c in current_selected_countries]:
        logger.info(f"cb_select_country: –ö—Ä–∞—ó–Ω–∞ {country_code} –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞. –ó–Ω—ñ–º–∞—î–º–æ –≤–∏–±—ñ—Ä.")
    else:
        new_selected_countries_data["directionRows"].append({"countrySign": country_code.upper()})
        logger.info(f"cb_select_country: –û–±—Ä–∞–Ω–æ –∫—Ä–∞—ó–Ω—É {country_code}. –¢–µ–ø–µ—Ä —Ü–µ —î–¥–∏–Ω–∞ –æ–±—Ä–∞–Ω–∞ –∫—Ä–∞—ó–Ω–∞.")

    if is_from_direction:
        lardi_filter_obj.direction_from = new_selected_countries_data
        logger.info(f"cb_select_country: –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ direction_from: {new_selected_countries_data}")
    else:
        lardi_filter_obj.direction_to = new_selected_countries_data
        logger.info(f"cb_select_country: –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ direction_to: {new_selected_countries_data}")

    logger.info(f"cb_select_country: LardiSearchFilter –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º. direction_from: {lardi_filter_obj.direction_from}")
    logger.info(f"cb_select_country: LardiSearchFilter –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º. direction_to: {lardi_filter_obj.direction_to}")

    try:
        await sync_to_async(lardi_filter_obj.save)()
        logger.info(f"cb_select_country: –§—ñ–ª—å—Ç—Ä LardiSearchFilter (ID: {lardi_filter_obj.id}) –£–°–ü–Ü–®–ù–û –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î.")
    except Exception as e:
        logger.error(f"cb_select_country: –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ LardiSearchFilter (ID: {lardi_filter_obj.id}): {e}", exc_info=True)
        await callback.message.answer(settings_manager.get("text_error_saving_filters", default="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤."))

    if is_from_direction:
        updated_selected_countries_for_keyboard = _extract_country_signs(lardi_filter_obj.direction_from)
    else:
        updated_selected_countries_for_keyboard = _extract_country_signs(lardi_filter_obj.direction_to)

    await callback.message.edit_reply_markup(
        reply_markup=get_country_options_keyboard(
            selected_countries=updated_selected_countries_for_keyboard,
            current_page=current_page,
            is_from_direction=is_from_direction
        )
    )

    selected_count_text = (
        f"–û–±—Ä–∞–Ω–∞ –∫—Ä–∞—ó–Ω–∞: {country_code}"
        if updated_selected_countries_for_keyboard else "–ñ–æ–¥–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏ –Ω–µ –æ–±—Ä–∞–Ω–æ"
    )
    try:
        await callback.message.edit_text(
            f"{settings_manager.get('text_countries_menu')}\n\n{selected_count_text}",
            reply_markup=get_country_options_keyboard(
                selected_countries=updated_selected_countries_for_keyboard,
                current_page=current_page,
                is_from_direction=is_from_direction
            )
        )
    except TelegramBadRequest as e:
        logger.warning(f"TelegramBadRequest –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É: {e}. –Ü–≥–Ω–æ—Ä—É—î–º–æ, –π–º–æ–≤—ñ—Ä–Ω–æ, —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è —Å—É—Ç—Ç—î–≤–æ, –∞–ª–µ —Ä–æ–∑–º—ñ—Ç–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞.")

    answer_text = (
        f"–û–±—Ä–∞–Ω–æ: {ALL_COUNTRIES_FOR_SELECTION.get(country_code, country_code)}"
        if country_code.upper() in [c.upper() for c in updated_selected_countries_for_keyboard]
        else "–í–∏–±—ñ—Ä –∫—Ä–∞—ó–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    )
    await callback.answer(answer_text)


@router.callback_query(F.data == "filter_boolean_options_menu")
async def cb_filter_boolean_options_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –±—É–ª–µ–≤–∏—Ö –æ–ø—Ü—ñ–π.
    """
    telegram_id = callback.from_user.id
    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    current_filters_dict = user_filter_to_dict(lardi_filter_obj)

    await state.set_state(FilterForm.boolean_options_menu)
    await callback.message.edit_text(
        settings_manager.get("text_boolean_options_filter_menu"),
        reply_markup=get_boolean_options_keyboard(current_filters_dict)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_boolean_"))
async def cb_toggle_boolean_option(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±—É–ª–µ–≤–æ—ó –æ–ø—Ü—ñ—ó (True <-> False).
    """
    telegram_id = callback.from_user.id
    param_name = callback.data.replace("toggle_boolean_", "")

    lardi_filter_obj = await _get_or_create_lardi_filter(telegram_id)

    current_value_before_set = getattr(lardi_filter_obj, param_name, False)
    logger.info(f"User {telegram_id}: Toggling option '{param_name}'.")
    logger.info(f"Before change - LardiFilter object state for '{param_name}': {current_value_before_set}")

    new_value = not current_value_before_set

    setattr(lardi_filter_obj, param_name, new_value)
    logger.info(f"After setattr (in-memory) - LardiFilter object state for '{param_name}': {getattr(lardi_filter_obj, param_name, 'N/A')}")

    await lardi_filter_obj.asave()

    lardi_filter_obj_reloaded = await _get_or_create_lardi_filter(telegram_id)
    logger.info(f"After asave() and RELOAD - LardiFilter object state for '{param_name}': {getattr(lardi_filter_obj_reloaded, param_name, 'N/A')}")

    if getattr(lardi_filter_obj_reloaded, param_name) == current_value_before_set:
        display_name = boolean_options_names.get(param_name, param_name)
        status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if current_value_before_set else "–≤–∏–º–∫–Ω–µ–Ω–æ"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –∑–º—ñ–Ω–∏, –±–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –∑–º—ñ–Ω–∏ –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—å
        await callback.answer(f"–û–ø—Ü—ñ—è '{display_name}' –≤–∂–µ {status_text} (–±–µ–∑ –∑–º—ñ–Ω).", show_alert=False)
        return

    display_name = boolean_options_names.get(param_name, param_name)
    status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_value else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    message_text = f"‚úÖ –û–ø—Ü—ñ—è '{display_name}' {status_text}."

    current_filters_dict_updated = user_filter_to_dict(lardi_filter_obj_reloaded)

    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_boolean_options_keyboard(current_filters_dict_updated)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.warning(f"Message reply markup not modified for user {telegram_id}: {e}")
        else:
            raise
    finally:
        await callback.answer(message_text, show_alert=False)


@router.callback_query(FilterForm.main_menu, F.data == "show_current_filters")
async def cb_show_current_filters(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    –¢–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    try:
        user_filter_obj = await _get_or_create_lardi_filter(telegram_id=callback.from_user.id)

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        # –î–æ—Å—Ç—É–ø –¥–æ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ _meta.fields –æ–±–≥–æ—Ä—Ç–∞—î–º–æ sync_to_async
        filters_to_display = await sync_to_async(lambda: {
            field.name: getattr(user_filter_obj, field.name)
            for field in user_filter_obj._meta.fields
            if field.name not in ['id', 'user', 'created_at', 'updated_at']  # –í–∏–∫–ª—é—á–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
        })()

        filters_json = json.dumps(filters_to_display, indent=2, ensure_ascii=False)
        await callback.message.edit_text(
            settings_manager.get("text_current_filters").format(filters_json=filters_json),
            reply_markup=get_back_to_filter_main_menu_button()
        )
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: {e}")
        print(f"Error showing current filters: {e}")

    await callback.answer()


@router.callback_query(F.data == "reset_filters_confirm")
async def cb_reset_filters_confirm(callback: CallbackQuery):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    await callback.message.edit_text(
        settings_manager.get("text_filters_reset_confirm"),
        reply_markup=get_reset_filters_confirm_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "reset_filters_confirmed")
async def cb_reset_filters_confirmed(callback: CallbackQuery, state: FSMContext):
    """
    –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    """
    lardi_client.filters = lardi_client.default_filters()  # –°–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö
    await state.set_state(FilterForm.main_menu)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    await callback.message.edit_text(
        settings_manager.get("text_filters_reset_done"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()
