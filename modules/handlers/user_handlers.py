import json
import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from modules.app_config import settings_manager, env_config
from modules.keyboards import (
    get_main_menu_keyboard,
    get_back_to_main_menu_button,
    get_cancel_keyboard,
    get_filter_main_menu_keyboard,
    get_cargo_params_filter_keyboard,
    get_load_types_filter_keyboard,
    get_reset_filters_confirm_keyboard,
    get_back_to_filter_main_menu_button,
    get_cargo_details_webapp_keyboard
)
from modules.fsm_states import LardiForm, FilterForm
from modules.lardi_api_client import LardiClient, LardiOfferClient

from modules.utils import date_format, add_line, user_filter_to_dict

# --- Django –º–æ–¥–µ–ª—ñ ---
from django.contrib.auth.models import User
from filters.models import LardiSearchFilter
from users.models import UserProfile
from asgiref.sync import sync_to_async
# ------

router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ Lardi
lardi_client = LardiClient()
lardi_offer_client = LardiOfferClient()


# –Ü–º'—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Web App
# BOT_USERNAME = 'LardiSearch_bot'


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def get_user_filters_from_db(telegram_id: int) -> LardiSearchFilter:
    """
    –û—Ç—Ä–∏–º—É—î –æ–±'—î–∫—Ç LardiSearchFilter –¥–ª—è –¥–∞–Ω–æ–≥–æ Telegram ID.
    –Ø–∫—â–æ –æ–±'—î–∫—Ç –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –∑ default_filters.
    """
    # –ó–º—ñ–Ω–µ–Ω–æ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –º–µ—Ç–æ–¥–∏ ORM await-—É—î–º–æ –Ω–∞–ø—Ä—è–º—É
    user_profile = await UserProfile.objects.aget(telegram_id=telegram_id)
    lardi_filter, created = await LardiSearchFilter.objects.aget_or_create(user=user_profile)
    return lardi_filter

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –†–µ—î—Å—Ç—Ä—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –¥–ª—è –Ω—å–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î.
    """
    await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω FSM

    telegram_id = message.from_user.id
    username = message.from_user.username or f"telegram_user_{telegram_id}"

    try:
        # 1. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ Django User
        django_user, user_created = await User.objects.aget_or_create(
            username=username,
            defaults={
                'first_name': message.from_user.first_name or '',
                'last_name': message.from_user.last_name or '',
            }
        )

        # –Ø–∫—â–æ user_created –¥–æ—Ä—ñ–≤–Ω—é—î False, –∞–ª–µ username –∑–º—ñ–Ω–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ
        if not user_created and await sync_to_async(lambda: django_user.username)() != username:
            django_user.username = username
            await sync_to_async(django_user.asave)()

        # 2. –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ UserProfile, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ django_user
        user_profile, profile_created = await UserProfile.objects.aget_or_create(
            telegram_id=telegram_id,
            defaults={'user': django_user}
        )
        if not profile_created and await sync_to_async(lambda: user_profile.user)() != django_user:
            user_profile.user = django_user
            await sync_to_async(user_profile.asave)()

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user_created or profile_created:
            await message.answer(settings_manager.get("user_create"), reply_markup=get_main_menu_keyboard())
        else:
            await message.answer(settings_manager.get("user_comeback"), reply_markup=get_main_menu_keyboard())

        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î LardiSearchFilter –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await LardiSearchFilter.objects.aget_or_create(user=user_profile)

    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        print(f"Error during user registration: {e}")
        return


@router.callback_query(F.data == "start_menu")
async def cb_start_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    await state.clear()
    await callback.message.edit_text(
        settings_manager.get("text_welcome_message"),
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "search_offers")
async def cb_search_offers(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—à—É–∫ –≤–∞–Ω—Ç–∞–∂—ñ–≤".
    –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –≤–∞–Ω—Ç–∞–∂—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    –∞–±–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await callback.answer(text="–®—É–∫–∞—é –≤–∞–Ω—Ç–∞–∂—ñ...", show_alert=False)

    try:
        telegram_id = callback.from_user.id

        user_profile, created = await UserProfile.objects.aget_or_create(telegram_id=telegram_id)

        lardi_filter_obj, created_filter = await LardiSearchFilter.objects.aget_or_create(user=user_profile)

        user_filters = user_filter_to_dict(lardi_filter_obj) if user_filter_to_dict(lardi_filter_obj) else lardi_client.filters

        data = lardi_client.get_proposals(filters=user_filters)
        results = data.get("result", {}).get("proposals", {})

        if not results:
            await callback.message.answer("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.", reply_markup=get_back_to_main_menu_button())
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–∞–∫—Å–∏–º—É–º 5 –≤–∞–Ω—Ç–∞–∂—ñ–≤ (—è–∫ —É –≤–∞—à–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ)
        for i, item in enumerate(results[:5], 1):
            _id = item.get('id', '')
            status = item.get('status', '')

            from_data = item.get("waypointListSource", [{}])[0]
            from_city = from_data.get("town", "–ù–µ–≤—ñ–¥–æ–º–æ")
            from_region = from_data.get("region", "")
            from_country = from_data.get("countrySign", "")
            from_address = from_data.get('address', "")

            to_data = item.get("waypointListTarget", [{}])[0]
            to_city = to_data.get("town", "–ù–µ–≤—ñ–¥–æ–º–æ")
            to_region = to_data.get("region", "")
            to_country = to_data.get("countrySign", "")
            to_address = to_data.get("address", "")

            cargo = item.get("gruzName", "‚Äî")
            mass = item.get("gruzMass", "‚Äî")
            volume = item.get("gruzVolume", "‚Äî")
            load_type = item.get("loadTypes", "‚Äî")
            payment = item.get("payment", "‚Äî")
            payment_form = ", ".join(pf.get("name", "") for pf in item.get("paymentForms", []))
            distance_km = round(item.get("distance", 0) / 1000) if item.get("distance") else '‚Äî'
            repeated_status = "üîÅ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π" if item.get("repeated") else ""

            # –û—Å–Ω–æ–≤–Ω–∞ —à–∞–ø–∫–∞
            block = f"üì¶ #{i} | ID: {_id} | {status}\n"
            block += f"üïí {date_format(item.get('dateFrom', ''))} ‚Üí {date_format(item.get('dateTo', ''))}\n"
            block += f"üìÖ –°—Ç–≤.: {date_format(item.get('dateCreate', ''))} | –ó–º—ñ–Ω.: {date_format(item.get('dateEdit', ''))}\n"
            # –ú—ñ—Å—Ü–µ –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            block += add_line("üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"{from_city}, {from_region} ({from_country})", important=True)
            block += add_line("‚óΩ –ê–¥—Ä–µ—Å–∞: ", f"{from_address}")
            # –ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            block += add_line("üìç –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", f"{to_city}, {to_region} ({to_country})", important=True)
            block += add_line("‚óæ –ê–¥—Ä–µ—Å–∞: ", f"{to_address}")
            block += add_line("üöö –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ", load_type, important=True)
            # –í–∞–Ω—Ç–∞–∂
            block += add_line("üì¶ –í–∞–Ω—Ç–∞–∂: ", cargo)
            block += add_line("‚öñÔ∏è –í–∞–≥–∞: ", mass)
            block += add_line("üì¶ –û–± º—î–º: ", volume)
            # –û–ø–ª–∞—Ç–∞
            block += add_line("üí∞ –û–ø–ª–∞—Ç–∞: ", f"{payment} ({payment_form})", important=True)
            # –í—ñ–¥—Å—Ç–∞–Ω—å —ñ –ø–æ–≤—Ç–æ—Ä
            if distance_km != '‚Äî':
                block += f"üõ£Ô∏è –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km} –∫–º\n"
            if repeated_status:
                block += f"{repeated_status}\n"

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —ñ–∑ –≤–∞–Ω—Ç–∞–∂—ñ–≤ –æ–∫—Ä–µ–º–æ —ñ–∑ webapp button
            await callback.message.answer(block, reply_markup=get_cargo_details_webapp_keyboard(_id), parse_mode="Markdown")

        await callback.message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–∫–∞–∑ –≤–∞–Ω—Ç–∞–∂—ñ–≤.", reply_markup=get_back_to_main_menu_button())

    except Exception as e:
        await callback.message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞–Ω—Ç–∞–∂—ñ–≤: {e}", reply_markup=get_back_to_main_menu_button())
    finally:
        await callback.answer()


@router.callback_query(F.data == "view_offer_by_id")
async def cb_view_offer_by_id(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞–Ω—Ç–∞–∂ –∑–∞ ID".
    –ó–∞–ø–∏—Ç—É—î ID –≤–∞–Ω—Ç–∞–∂—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await state.set_state(LardiForm.waiting_for_offer_id)
    await callback.message.edit_text(
        settings_manager.get("text_enter_offer_id"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(LardiForm.waiting_for_offer_id)
async def process_offer_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤–∞–Ω—Ç–∞–∂—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    try:
        offer_id = int(message.text)
        await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–Ω—Ç–∞–∂...")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É LardiOfferClient –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        data = lardi_offer_client.get_offer(offer_id)

        if data:
            cargo_data = data.get('cargo', {})
            if cargo_data:
                # –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –≤–∏–≤–æ–¥—É –≤ Telegram
                response_text = f"üìÑ –î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É (ID: {offer_id})\n" + "=" * 40 + "\n"
                for key, value in cargo_data.items():
                    if isinstance(value, (dict, list)):
                        # –î–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤/—Å–ø–∏—Å–∫—ñ–≤ –≤–∏–≤–æ–¥–∏–º–æ —ó—Ö —è–∫ JSON —Ä—è–¥–æ–∫
                        try:
                            response_text += f"{key}: {json.dumps(value, ensure_ascii=False, indent=2)}\n"
                        except TypeError:  # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –æ–±'—î–∫—Ç –Ω–µ —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
                            response_text += f"{key}: {str(value)}\n"
                    else:
                        response_text += f"{key}: {value}\n"
                response_text += "=" * 40
                await message.answer(response_text, reply_markup=get_back_to_main_menu_button())
            else:
                await message.answer(settings_manager.get("text_offer_not_found"), reply_markup=get_back_to_main_menu_button())
        else:
            await message.answer(settings_manager.get("text_offer_not_found"), reply_markup=get_back_to_main_menu_button())

    except ValueError:
        await message.answer(
            settings_manager.get("text_invalid_offer_id"),
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", reply_markup=get_back_to_main_menu_button())
    finally:
        await state.clear()


@router.callback_query(F.data == "update_lardi_cookie")
async def cb_update_lardi_cookie(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–Ω–æ–≤–∏—Ç–∏ Cookie Lardi".
    –ó–∞–ø–∏—Ç—É—î –Ω–æ–≤–∏–π cookie —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await state.set_state(LardiForm.waiting_for_new_cookie)
    await callback.message.edit_text(
        settings_manager.get("text_enter_new_cookie"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(LardiForm.waiting_for_new_cookie)
async def process_new_cookie(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ cookie –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    new_cookie = message.text.strip()
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É LardiClient –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è cookie
        lardi_client.update_cookie(new_cookie)
        await message.answer(settings_manager.get("text_cookie_updated"), reply_markup=get_main_menu_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ cookie: {e}", reply_markup=get_back_to_main_menu_button())
    finally:
        await state.clear()


@router.callback_query(F.data == "cancel_action")
async def cb_cancel_action(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ FSM.
    """
    await state.clear()
    await callback.message.edit_text(
        settings_manager.get("text_welcome_message"),
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "change_filters")
async def cb_change_filters(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    await state.set_state(FilterForm.main_menu)
    await callback.message.edit_text(
        settings_manager.get("text_filter_main_menu"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_filter_main_menu")
async def cb_back_to_filter_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –ø—ñ–¥–º–µ–Ω—é.
    """
    await state.set_state(FilterForm.main_menu)
    await callback.message.edit_text(
        settings_manager.get("text_filter_main_menu"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_directions_menu")
async def cb_filter_directions_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–ø—Ä—è–º–∫—ñ–≤.
    """
    await state.set_state(FilterForm.direction_menu)
    await callback.message.edit_text(
        settings_manager.get("text_directions_filter_menu"),
        reply_markup=get_back_to_filter_main_menu_button()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_cargo_params_menu")
async def cb_filter_cargo_params_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É.
    """
    await state.set_state(FilterForm.cargo_params_menu)
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è –∑–º—ñ–Ω–∏:",
        reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters)
    )
    await callback.answer()


@router.callback_query(F.data == "set_mass1")
async def cb_set_mass1(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    await state.set_state(FilterForm.waiting_for_mass1)
    await callback.message.edit_text(
        settings_manager.get("text_enter_mass_from"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(FilterForm.waiting_for_mass1)
async def process_mass1_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    try:
        mass1 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("mass1", mass1)
        await state.set_state(FilterForm.cargo_params_menu)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É
        await message.answer(
            settings_manager.get("text_mass_updated"),
            reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters)
        )
    except ValueError:
        await message.answer(
            settings_manager.get("text_invalid_number_input"),
            reply_markup=get_cancel_keyboard()
        )


@router.callback_query(F.data == "set_mass2")
async def cb_set_mass2(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    await state.set_state(FilterForm.waiting_for_mass2)
    await callback.message.edit_text(
        settings_manager.get("text_enter_mass_to"),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(FilterForm.waiting_for_mass2)
async def process_mass2_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –º–∞—Å–∏.
    """
    try:
        mass2 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("mass2", mass2)
        await state.set_state(FilterForm.cargo_params_menu)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∞–Ω—Ç–∞–∂—É
        await message.answer(
            settings_manager.get("text_mass_updated"),
            reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters)
        )
    except ValueError:
        await message.answer(
            settings_manager.get("text_invalid_number_input"),
            reply_markup=get_cancel_keyboard()
        )


# –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –Ü–ù–®–ò–• –ü–ê–†–ê–ú–ï–¢–†–Ü–í –í–ê–ù–¢–ê–ñ–£ (–æ–±'—î–º, –¥–æ–≤–∂–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞)
@router.callback_query(F.data == "set_volume1")
async def cb_set_volume1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_volume1)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—É –º¬≥), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_volume1)
async def process_volume1_input(message: Message, state: FSMContext):
    try:
        volume1 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("volume1", volume1)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–û–±'—î–º"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_volume2")
async def cb_set_volume2(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_volume2)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—É –º¬≥), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_volume2)
async def process_volume2_input(message: Message, state: FSMContext):
    try:
        volume2 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("volume2", volume2)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–û–±'—î–º"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_length1")
async def cb_set_length1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_length1)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_length1)
async def process_length1_input(message: Message, state: FSMContext):
    try:
        length1 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("length1", length1)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–î–æ–≤–∂–∏–Ω–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_length2")
async def cb_set_length2(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_length2)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13.6", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_length2)
async def process_length2_input(message: Message, state: FSMContext):
    try:
        length2 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("length2", length2)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–î–æ–≤–∂–∏–Ω–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_width1")
async def cb_set_width1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_width1)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.2", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_width1)
async def process_width1_input(message: Message, state: FSMContext):
    try:
        width1 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("width1", width1)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–®–∏—Ä–∏–Ω–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_width2")
async def cb_set_width2(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_width2)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.5", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_width2)
async def process_width2_input(message: Message, state: FSMContext):
    try:
        width2 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("width2", width2)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–®–∏—Ä–∏–Ω–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_height1")
async def cb_set_height1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_height1)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.0", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_height1)
async def process_height1_input(message: Message, state: FSMContext):
    try:
        height1 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("height1", height1)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–í–∏—Å–æ—Ç–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "set_height2")
async def cb_set_height2(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterForm.waiting_for_height2)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É (—É –º.), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 3.0", reply_markup=get_cancel_keyboard())
    await callback.answer()


@router.message(FilterForm.waiting_for_height2)
async def process_height2_input(message: Message, state: FSMContext):
    try:
        height2 = float(message.text.replace(',', '.'))
        lardi_client.set_filter("height2", height2)
        await state.set_state(FilterForm.cargo_params_menu)
        await message.answer(settings_manager.get("text_mass_updated").replace("–ú–∞—Å–∞", "–í–∏—Å–æ—Ç–∞"),
                             reply_markup=get_cargo_params_filter_keyboard(lardi_client.filters))
    except ValueError:
        await message.answer(settings_manager.get("text_invalid_number_input"), reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "filter_load_types_menu")
async def cb_filter_load_types_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é —Ç–∏–ø—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id

    lardi_filter_obj = await LardiSearchFilter.objects.filter(user__telegram_id=telegram_id).afirst()

    if not lardi_filter_obj:
        user_profile, created = await UserProfile.objects.aget_or_create(telegram_id=telegram_id)
        lardi_filter_obj = await LardiSearchFilter.objects.acreate(user=user_profile, **lardi_client.default_filters())

    current_load_types = lardi_filter_obj.load_types if lardi_filter_obj.load_types is not None else []

    await state.set_state(FilterForm.load_types_menu)
    await callback.message.edit_text(
        settings_manager.get("text_select_load_types"),
        reply_markup=get_load_types_filter_keyboard(current_load_types)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_load_type_"))
async def cb_toggle_load_type(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    """
    telegram_id = callback.from_user.id

    load_type_to_toggle = callback.data.replace("toggle_load_type_", "")

    lardi_filter_obj = await LardiSearchFilter.objects.filter(user__telegram_id=telegram_id).afirst()

    if not lardi_filter_obj:
        # –¶–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—è, —è–∫—â–æ cb_filter_load_types_menu –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ –π–æ–≥–æ,
        # –∞–ª–µ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫.
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await callback.answer()
        return

    current_load_types = lardi_filter_obj.load_types if lardi_filter_obj.load_types is not None else []

    # 2. –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫: –¥–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–ø
    if load_type_to_toggle in current_load_types:
        current_load_types.remove(load_type_to_toggle)
        message_text = f"‚ùå –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{load_type_to_toggle}' –≤–∏–º–∫–Ω–µ–Ω–æ."
    else:
        current_load_types.append(load_type_to_toggle)
        message_text = f"‚úÖ –¢–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{load_type_to_toggle}' —É–≤—ñ–º–∫–Ω–µ–Ω–æ."

    # 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    lardi_filter_obj.load_types = current_load_types
    await lardi_filter_obj.asave() # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async save

    # 4. –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–º—ñ–Ω–∏
    await callback.message.edit_reply_markup(
        reply_markup=get_load_types_filter_keyboard(current_load_types)
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
    await callback.answer(message_text, show_alert=False)


@router.callback_query(F.data == "filter_payment_forms_menu")
async def cb_filter_payment_forms_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç–∏.
    """
    await state.set_state(FilterForm.payment_forms_menu)
    await callback.message.edit_text(
        settings_manager.get("text_payment_forms_filter_menu"),
        reply_markup=get_back_to_filter_main_menu_button()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_boolean_options_menu")
async def cb_filter_boolean_options_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –æ–ø—Ü—ñ–π.
    """
    await state.set_state(FilterForm.boolean_options_menu)
    await callback.message.edit_text(
        settings_manager.get("text_boolean_options_filter_menu"),
        reply_markup=get_back_to_filter_main_menu_button()
    )
    await callback.answer()


@router.callback_query(FilterForm.main_menu, F.data == "show_current_filters")
async def cb_show_current_filters(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    –¢–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    try:
        user_filter_obj = await get_user_filters_from_db(telegram_id=callback.from_user.id)

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        # –î–æ—Å—Ç—É–ø –¥–æ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ _meta.fields –æ–±–≥–æ—Ä—Ç–∞—î–º–æ sync_to_async
        filters_to_display = await sync_to_async(lambda: {
            field.name: getattr(user_filter_obj, field.name)
            for field in user_filter_obj._meta.fields
            if field.name not in ['id', 'user', 'created_at', 'updated_at']  # –í–∏–∫–ª—é—á–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
        })()

        filters_json = json.dumps(filters_to_display, indent=2, ensure_ascii=False)
        await callback.message.edit_text(
            settings_manager.get("text_current_filters").format(filters_json=filters_json),
            reply_markup=get_back_to_filter_main_menu_button()
        )
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: {e}")
        print(f"Error showing current filters: {e}")

    await callback.answer()


@router.callback_query(F.data == "reset_filters_confirm")
async def cb_reset_filters_confirm(callback: CallbackQuery):
    """
    –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    await callback.message.edit_text(
        settings_manager.get("text_filters_reset_confirm"),
        reply_markup=get_reset_filters_confirm_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "reset_filters_confirmed")
async def cb_reset_filters_confirmed(callback: CallbackQuery, state: FSMContext):
    """
    –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    """
    lardi_client.filters = lardi_client.default_filters()  # –°–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö
    await state.set_state(FilterForm.main_menu)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    await callback.message.edit_text(
        settings_manager.get("text_filters_reset_done"),
        reply_markup=get_filter_main_menu_keyboard()
    )
    await callback.answer()
