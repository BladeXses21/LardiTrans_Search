import asyncio
import logging
from typing import List, Dict, Any
import re

from django.utils import timezone

from aiogram import Bot
from aiogram.enums import ParseMode
from asgiref.sync import sync_to_async

from users.models import UserProfile
from modules.lardi_api_client import lardi_notification_client
from modules.keyboards import get_cargo_details_webapp_keyboard
from modules.app_config import settings_manager
from modules.utils import date_format

logger = logging.getLogger(__name__)

NOTIFICATION_CHECK_INTERVAL = 30  # 5 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö


def escape_markdown_v2(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î –≤—Å—ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ –¥–ª—è Telegram MarkdownV2.
    """
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*\[\]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)


async def send_cargo_notification(bot: Bot, user_profile: UserProfile, cargo: Dict[str, Any]):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –≤–∞–Ω—Ç–∞–∂.
    """
    if not isinstance(cargo, dict):
        logger.error(f"CARGO IS NOT DICT! {cargo}")
        return
    cargo_id = cargo.get("id")
    if not cargo_id:
        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_profile.user.username}")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∞–Ω—Ç–∞–∂ –≤–∂–µ –±—É–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    cargo_skip_list = user_profile.cargo_skip if user_profile.cargo_skip else []
    if cargo_id in cargo_skip_list:
        logger.info(f"–í–∞–Ω—Ç–∞–∂ {cargo_id} –≤–∂–µ –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∞–±–æ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π –¥–ª—è {user_profile.user.username}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ cargo_skip, —â–æ–± –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ü–µ–π –≤–∞–Ω—Ç–∞–∂ –∑–Ω–æ–≤—É
    @sync_to_async
    def update_cargo_skip(user_profile_obj, cargo_id_to_add):
        if user_profile_obj.cargo_skip is None:
            user_profile_obj.cargo_skip = []
        if cargo_id_to_add not in user_profile_obj.cargo_skip:
            user_profile_obj.cargo_skip.append(cargo_id_to_add)
            user_profile_obj.save(update_fields=['cargo_skip'])
            logger.info(f"–î–æ–¥–∞–Ω–æ {cargo_id_to_add} –¥–æ cargo_skip –¥–ª—è {user_profile_obj.user.username}")

    await update_cargo_skip(user_profile, cargo_id)

    from_address = str(cargo.get("waypointListSource", [{}])[0].get("address", "-"))
    to_address = str(cargo.get("waypointListTarget", [{}])[0].get("address", "-"))
    message_parts = {
        "cargo_id": str(cargo_id),
        "dateFrom": str(date_format(cargo.get("dateFrom", "-"))),
        "dateTo": str(date_format(cargo.get("dateTo", "-"))),
        "dateCreate": str(date_format(cargo.get("dateCreate", "-"))),
        "dateEdit": str(date_format(cargo.get("dateEdit", "-"))),

        "from_town": str(cargo.get("waypointListTarget", [{}])[0].get("town", "-")),
        "from_region": str(cargo.get("waypointListTarget", [{}])[0].get("region", "-")),
        "from_countrySign": str(cargo.get("waypointListTarget", [{}])[0].get("countrySign", "-")),
        "from_address": from_address if not None else "–ü—É—Å—Ç–æ",

        "to_town": str(cargo.get("waypointListTarget", [{}])[0].get("town", "-")),
        "to_region": str(cargo.get("waypointListTarget", [{}])[0].get("region", "-")),
        "to_countrySign": str(cargo.get("waypointListTarget", [{}])[0].get("countrySign", "-")),
        "to_address": to_address if not None else "–ü—É—Å—Ç–æ",

        "loadTypes": str(cargo.get("loadTypes", "-")),
        "gruzName": str(cargo.get("gruzName", "-")),
        "gruzMass": str(cargo.get("gruzMass", "-")),
        "gruzVolume": str(cargo.get("gruzVolume", "-")),
        "payment": str(cargo.get("payment", "-")),
        "paymentForms": ", ".join(pf.get("name", "") for pf in cargo.get("paymentForms", [])),
        "distance": round(cargo.get("distance", 0) / 1000) if cargo.get("distance") else '‚Äî',
        "repeated": "üîÅ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π" if cargo.get("repeated") else "",
    }

    escaped_message_parts = {k: escape_markdown_v2(v) for k, v in message_parts.items()}

    template = settings_manager.get("text_notification_new_cargo")

    try:
        message_text = template.format(
            **escaped_message_parts
        )
    except KeyError as e:
        logger.error(
            f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É 'text_notification_new_cargo'. –í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ {e} —É –¥–∞–Ω–∏—Ö –≤–∞–Ω—Ç–∞–∂—É –∞–±–æ escape_markdown_v2: {cargo}. –®–∞–±–ª–æ–Ω: {template}")
        return await bot.send_message(
            chat_id=user_profile.telegram_id,
            text="–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –≤–∞–Ω—Ç–∞–∂.",
            parse_mode=ParseMode.HTML,
        )

    try:
        await bot.send_message(
            chat_id=user_profile.telegram_id,
            text=message_text,
            reply_markup=get_cargo_details_webapp_keyboard(cargo_id),
            parse_mode="MarkdownV2"
        )
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞–Ω—Ç–∞–∂ {cargo_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_profile.user.username}")
    except Exception as e:
        logger.error(
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_profile.user.username} (ID: {user_profile.telegram_id}): {e}\n"
            f"–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}"
        )


@sync_to_async
def get_active_notification_users() -> List[UserProfile]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ UserProfile, —É —è–∫–∏—Ö —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    """
    return list(UserProfile.objects.select_related("user").filter(
        notification_status=True,
        notification_time__isnull=False
    ))


async def notification_checker(bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤
    –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏.
    """
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–Ω—Ç–∞–∂—ñ–≤ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
            users_to_notify = await get_active_notification_users()
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å (id): {[u.id for u in users_to_notify]}")

            for user_profile in users_to_notify:
                logger.info(f"user_id={user_profile.id}, telegram_id={user_profile.telegram_id}")  # –ù–µ —á—ñ–ø–∞—î–º–æ user.username —Ç—É—Ç
                last_notification_time = user_profile.notification_time
                if not last_notification_time:
                    logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_profile.user.username} –º–∞—î —É–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π notification_time. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
                    continue

                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –≤–∞–Ω—Ç–∞–∂—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –π–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∏
                    new_cargos = await lardi_notification_client.get_new_offers(
                        user_profile.telegram_id,
                        last_notification_time
                    )

                    if new_cargos:
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_cargos)} –Ω–æ–≤–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤ –¥–ª—è {user_profile.user.username}.")
                        for cargo in new_cargos:
                            await asyncio.sleep(0.5)
                            await send_cargo_notification(bot, user_profile, cargo)
                    else:
                        logger.info(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤ –¥–ª—è {user_profile.user.username}.")


                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_profile.user.username}: {e}")

                @sync_to_async
                def update_user_notification_time(user_prof_obj, time_to_set):
                    user_prof_obj.notification_time = time_to_set
                    user_prof_obj.save(update_fields=["notification_time"])
                    local_time_for_log = timezone.localtime(time_to_set)
                    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ notification_time –¥–æ {local_time_for_log} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_prof_obj.user.username}.")

                await update_user_notification_time(user_profile, timezone.now())

        except Exception as e:
            logger.error(f"FATAL ERROR in notification_checker: {e}", exc_info=True)

        await asyncio.sleep(NOTIFICATION_CHECK_INTERVAL)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω
